Delamination Analysis
=====================

Overview
--------
The :class:`~deladect.delamination.DelaminationDetector` module quantifies delamination in
stacked laminate imagery generated by :class:`~deladect.detection.Specimen`. The detector
constructs region-specific masks for the upper and lower laminate edges and for the diffuse
region surrounding crack trajectories. Each mask is derived from calibrated grayscale stacks,
incorporates region padding derived from the crack catalogue, and can be exported alongside the
original frame for visual audit trails.

Methodological Summary
----------------------
For every frame and anatomical region the detector executes a five-stage pipeline:

1. Region-of-interest extraction and optional orientation alignment (lower edges are flipped to
   maintain a consistent coordinate frame).
2. Morphological pre-filtering via sequential maximum and minimum filters, parameterised by the
   window sizes supplied at instantiation. This step emulates a structural closing that suppresses
   isolated noise while preserving connected delamination fronts.
3. Scalar threshold selection (manual or Otsu-based, see :ref:`Threshold Determination <delam-threshold>`).
4. Gaussian smoothing of the binary mask using user-configurable standard deviations.
5. Post-threshold consolidation, including column-wise minimum accumulation for edge regions and
   optional frame-to-frame accumulation when ``compare_with_previous`` is enabled.

The resulting masks support pixel-area measurements, millimetre-scale conversion (via
``scale_px_mm``), and qualitative overlays.

.. _delam-threshold:

Threshold Determination
-----------------------
A single scalar threshold is estimated per frame and per region (upper edge, lower edge, diffuse
middle). The detector follows a mutually exclusive decision tree:

- Manual override: If ``th_upper``, ``th_lower`` or ``th_middle`` is supplied to
  :meth:`~deladect.delamination.DelaminationDetector.detect` or
  :meth:`~deladect.delamination.DelaminationDetector.detect_all`, the provided value is adopted
  verbatim for every processed frame in that region.
- Automatic inference: When no manual value is supplied, the detector invokes
  :meth:`~deladect.delamination.DelaminationDetector.images_threshold`. This routine applies the
  aforementioned maximum/minimum cascade and then evaluates :func:`skimage.filters.threshold_otsu`
  on the filtered intensities. Otsu's method selects the threshold that maximises between-class
  variance in the intensity histogram, corresponding to the valley between foreground and
  background populations [Otsu1979]_. The returned scalar serves as the decision boundary for that
  frame and region.

Manual and automatic paths are mutually exclusive; only one threshold value is propagated to the
binary comparison stage for each region and frame.

Adaptive Otsu Controls
----------------------
When Otsu governs the threshold, several modifiers provide controlled biasing without removing the
benefits of data-driven estimation:

- Multiplicative tuning via ``th_alpha_upper``, ``th_alpha_lower`` and ``th_alpha_middle`` scales the
  Otsu-derived value. Factors below ``1.0`` lower the decision boundary, increasing sensitivity,
  whereas factors above ``1.0`` make detections more conservative.
- Additive tuning via ``th_offset_upper``, ``th_offset_lower`` and ``th_offset_middle`` shifts the
  Otsu value by fixed grayscale units (0–255), useful for compensating for illumination drift.
- Temporal anchoring through ``use_last_frame_threshold=True`` instructs
  :meth:`~deladect.delamination.DelaminationDetector.detect_all` to compute the baseline threshold
  from the final frame of each stack and reuse it as the starting point for earlier frames. This is
  advantageous when acquisition artefacts diminish over time.

Each modifier is ignored whenever a manual threshold is provided for the corresponding region.

Post-threshold Filtering
------------------------
Following the binary decision, the pipeline applies Gaussian smoothing and additional structural
operations. The parameter ``min_pixel_value`` (exposed as ``min_pixel_value_middle`` in public
interfaces) acts on the smoothed response and enforces a secondary intensity requirement. Lower
values retain weaker but spatially coherent detections; higher values remove marginal responses
without altering the initial Otsu or manual threshold.

Example Workflow
----------------
The example below biases the Otsu thresholds slightly, anchors the adaptive baseline to the final
frame, and relaxes the diffuse post-filter to retain weaker signals:

.. code-block:: python

    from deladect.delamination import DelaminationDetector

    detector = DelaminationDetector(specimen)
    areas_mm2 = detector.detect_all(
        plot=True,
        use_last_frame_threshold=True,
        th_alpha_upper=0.95,
        th_alpha_lower=1.05,
        th_offset_middle=-12,
        min_pixel_value_middle=140,
    )

    # Each row: [frame_idx, total_edge_mm2, upper_mm2, lower_mm2, edge_rel, diffuse_mm2, diffuse_rel]

API Reference
-------------
.. automodule:: deladect.delamination
   :members:
   :undoc-members:
   :show-inheritance:
   :member-order: bysource

References
----------
.. [Otsu1979] N. Otsu, "A Threshold Selection Method from Gray-Level Histograms," *IEEE
   Transactions on Systems, Man, and Cybernetics*, vol. 9, no. 1, pp. 62-66, 1979.
